# -*- coding: utf-8 -*-
"""TSFtask1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18xMfA8S4fN9_A_TFxC0AAmYYPG-KcVB3

DATA SCIENCE AND BUSINESS ANALYTICS INTERN

THE SPARKS FOUNDATION

Varsha hudda

TASK 1: Prediction using Supervised ML
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing all libraries required in this notebook
import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt  
# %matplotlib inline

# Reading data from remote link
url = "http://bit.ly/w-data"
dataset = pd.read_csv(url)
dataset

dataset.dtypes

#total rows and columns
dataset.shape

#stats 
dataset.describe()

#null value check

dataset.isnull().sum()

"""**Data Visualization**"""

# Plotting the distribution of scores
dataset.plot(x='Hours', y='Scores', style='x')
plt.title('plot')  
plt.xlabel('Study hours')  
plt.ylabel('Percentage Score') 
plt.show()

"""**PREPARATION OF THE DATA**"""

X = dataset.iloc[:, :-1].values  
y = dataset.iloc[:, 1].values 

X.reshape(-1,1)
y.reshape(-1,1)

"""**SPLITTING DATASET**"""

from sklearn.model_selection import train_test_split  

X_train, X_test, y_train, y_test = train_test_split(X, y)

"""**TRAIN YOUR REGRESSION MODEL**"""

from sklearn.linear_model import LinearRegression  
lin_reg = LinearRegression() 

lin_reg.fit(X_train, y_train)

plt.scatter(X_train,y_train)
plt.title('Training')  
plt.plot(X_train,lin_reg.predict(X_train))
plt.xlabel('Hours Studied')  
plt.ylabel('e Score') 
plt.show()

# Accuracy 
lin_reg.score(X_train, y_train)

"""**Deriving the regression line equation**"""

line = lin_reg.coef_*X + lin_reg.intercept_
plt.scatter(X, y)
plt.title('Regression Line') 
plt.plot(X, line)
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score') 
plt.show()

"""**PREDICTION**"""

print(X_test)

y_pred = lin_reg.predict(X_test)

df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
df

"""**Score**"""

hours = float(input('Enter number of hours'))

own_pred = lin_reg.predict([[hours]])
print("Predicted Marks = {}".format((own_pred)[0]))

# Accuracy 

lin_reg.score(X_test, y_test)

# importing the metrics from sklearn

from sklearn import metrics  

print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))

plt.scatter(X_test,y_test)
plt.title('Test set')  
plt.plot(X_train,lin_reg.predict(X_train))
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score') 
plt.show()